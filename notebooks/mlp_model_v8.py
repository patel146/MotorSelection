# -*- coding: utf-8 -*-
"""ENGM670_Tyto

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B9GoMZPrcH3VQKFS-CvEnNrEKxdOzYt4
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

import tensorflow as tf
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import accuracy_score

df = pd.read_csv("merged_table.csv")
df
df.isna().sum()

# sns.pairplot(df.sample(25),hue="Throttle")
# plt.show()

motor_names = df['Motor_Name']
propeller_names = df["Propeller_Name"]

df = df.dropna()

features = df[['Throttle', 'Voltage (V)', 'Motor_kv(RPM/V)', 'Motor_Weight(g)', 'Motor_Diameter(mm)',
               'Motor_Height(mm)', 'Propeller_Diameter(in)', 'Pitch(in)', 'Number_of_Blades']]
targets = df['Thrust(gf)']


scaler = StandardScaler()
features_scaled = scaler.fit_transform(features)

X_train, X_test, y_train, y_test = train_test_split(features_scaled, targets, test_size=0.2, random_state=214)

# Add a small constant (epsilon) to avoid log(0) issues
epsilon = 1e-6

# Apply log transformation
features_log = np.log(df[['Throttle', 'Voltage (V)', 'Motor_kv(RPM/V)', 'Motor_Weight(g)',
                          'Motor_Diameter(mm)', 'Motor_Height(mm)', 'Propeller_Diameter(in)',
                          'Pitch(in)', 'Number_of_Blades']] + epsilon)

targets_log = np.log(df['Thrust(gf)'] + epsilon)

inspection_df = df[features_log.columns.tolist() + [targets_log.name]]

# Display the new DataFrame
sns.pairplot(inspection_df.sample(25), diag_kind='kde')
plt.show()

targets_log

scaler = StandardScaler()
features_scaled = scaler.fit_transform(features_log)

X_train, X_test, y_train, y_test = train_test_split(features_scaled, targets_log, test_size=0.2, random_state=214)

y_train = np.nan_to_num(y_train, nan=0)
y_test = np.nan_to_num(y_test, nan=0)


def check_data_cleanliness(df, name):
    print(f"üîç Checking {name}...")
    if np.isnan(df).sum().sum() > 0:
        print(f"‚ùå {name} contains NaN values!")
    else:
        print(f"‚úÖ No NaN values in {name}.")

    if np.isinf(df).sum().sum() > 0:
        print(f"‚ùå {name} contains infinite values!")
    else:
        print(f"‚úÖ No infinite values in {name}.")

    print(f"üìä {name} shape: {df.shape}\n")


# Check training and test data
check_data_cleanliness(X_train, "X_train")
check_data_cleanliness(X_test, "X_test")
check_data_cleanliness(y_train, "y_train")
check_data_cleanliness(y_test, "y_test")

model = tf.keras.Sequential([
    tf.keras.layers.InputLayer(shape=(X_train.shape[1],)),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1)
])

model.compile(
    optimizer='adam',
    loss='mean_squared_error',
    metrics=['mae'],
)

model.summary()

history = model.fit(
    X_train, y_train,
    validation_data=(X_test, y_test),
    epochs=150,
    batch_size=32,
    verbose=1
)

test_loss, test_mae = model.evaluate(X_test, y_test)
test_loss, test_mae = model.evaluate(X_test, y_test)
print(f"Test Loss: {test_loss}")
print(f"Test MAE: {test_mae}")

plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

"""# Consider Early Stopping"""

# Predict on new data (e.g., a new motor-propeller combination)
predictions = model.predict(X_test)

# Example: Print the first 5 predicted thrust values
print(predictions[:5])

model.save('mlp_model_v8.keras')
